version: '3'

services:
  postgres:
    image: postgres:latest
    container_name: postgres_dockerizing
    ports:
      - 5432:5432
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres123
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_HOST: postgres
    volumes:
      - database_dockerizing:/var/lib/postgresql/data
      - ./commands:/docker-entrypoint-initdb.d/
    networks:
      - fullstack
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: toor
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://root:toor@localhost:27017 --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - mongodb_data:/data/db
    networks:
      - fullstack

  backend:
    container_name: api_dockerizing
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    environment:
      POSTGRES_PASSWORD: postgres123
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_HOST: postgres
      MONGODB_HOST: mongodb
      MONGODB_USER: root
      MONGODB_PASSWORD: toor
    restart: always
    volumes:
      - api_volume:/usr/src/app/
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - fullstack

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    restart: always
    networks:
      - fullstack

volumes:
  database_dockerizing:
  api_volume:
  mongodb_data:

networks:
  fullstack:
    driver: bridge